import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static int N;
    static ArrayList<Node>[] Tree;
    static boolean[] visited;
    static int max_node;
    static int max_length;

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(bf.readLine());
        Tree = new ArrayList[N + 1];

        for( int i = 0; i < ( N + 1 ); i++ ){
            Tree[i] = new ArrayList<>();
        }

        for( int i = 0; i < ( N - 1 ); i++ ){
            StringTokenizer st = new StringTokenizer(bf.readLine(), " ");
            int parent = Integer.parseInt(st.nextToken());
            int child = Integer.parseInt(st.nextToken());
            int length = Integer.parseInt(st.nextToken());

            Tree[parent].add(new Node(child, length));
            Tree[child].add(new Node(parent, length));
        }

        visited = new boolean[ N + 1 ];
        dfs( 1, 0 );

        visited = new boolean[ N + 1 ];
        dfs( max_node, 0 );

        System.out.println(max_length);

    }

    public static void dfs( int vertex, int length ){
        if( max_length < length ){
            max_length = length;
            max_node = vertex;
        }
        visited[vertex] = true;

        for( int i = 0; i < Tree[vertex].size(); i++ ){
            Node node = Tree[vertex].get(i);

            if( !visited[node.vertex] ){
                visited[node.vertex] = true;
                dfs(node.vertex, length + node.distance);
            }
        }
    }

    public static class Node {
        int vertex;
        int distance;

        public Node ( int vertex, int distance ){
            this.vertex = vertex;
            this.distance = distance;
        }
    }
}
