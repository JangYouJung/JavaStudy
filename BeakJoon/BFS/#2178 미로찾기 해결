import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int[][] Maze;
    static boolean[][] Record;
    static int N;
    static int M;
    static int[] X = { 0, 1, 0, -1 };
    static int[] Y = { 1, 0, -1, 0 };

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        Maze = new int[N][M];
        Record = new boolean[N][M];

        for( int n = 0; n < N; n++ ){
            String line = br.readLine();
            for( int m = 0; m < M; m++ ){
                Maze[n][m] = line.charAt(m) - '0';
            }
        }

        findMinRoute();
        System.out.println(Maze[N-1][M-1]);

    }

    public static void findMinRoute(){

        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0});
        Record[0][0] = true;


        while(!queue.isEmpty()){
            int[] location = queue.poll();

            for( int i = 0; i < 4; i++ ) {
                int nr = location[0] + X[i];
                int nc = location[1] + Y[i];

                if (nr < 0 || nc < 0 || nr >= N || nc >= M || Maze[nr][nc] == 0 || Record[nr][nc]) {
                    continue;
                }

                Maze[nr][nc] = Maze[location[0]][location[1]] + 1;
                queue.add(new int[] {nr,nc});
                Record[nr][nc]= true;
            }

        }

    }

}
