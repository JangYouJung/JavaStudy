import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.io.BufferedReader;

public class Main {
    static int N;
    static int[][] map; // 아파트 지도
    static int[][] record; // 방문 여부 표시
    static int[] dx = { 0, 1, 0, -1 };
    static int[] dy = { 1, 0, -1, 0 };

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(bf.readLine());

        map = new int[N][N];
        record = new int[N][N];

        // [1] 지도 채우기
        for( int i = 0; i < N; i++ ){
            String line = bf.readLine();
            for( int j = 0; j < N; j++ ){
                int apartment = line.charAt(j) - '0';
                map[i][j] = apartment;
            }
        }

        ArrayList<Integer> group = new ArrayList<>();

        // [2] 지도 탐색하며 단지 찾기
        for( int i = 0; i < N; i++ ){
            for( int j = 0; j < N; j++ ){
                // 방문 기록 없는 아파트 발견했다면 bfs 함수 호출
                if( map[i][j] == 1 && record[i][j] == 0 ){
                    int count = bfs(i,j);
                    group.add(count);
                }
            }
        }

        Collections.sort(group);
        System.out.println(group.size());
        for( int i = 0; i < group.size(); i++ ){
            System.out.println(group.get(i));
        }
    }

    public static int bfs( int x, int y ){
        Deque<int[]> deque = new LinkedList<>();
        int count = 1;

        record[x][y] = 1;
        deque.add( new int[]{x,y} );

        while(!deque.isEmpty()){
            int[] current = deque.pollLast();
            for( int i = 0; i < 4; i ++ ){
                int nextX = current[0] + dx[i];
                int nextY = current[1] + dy[i];

                if( nextX < 0 | nextY < 0 | nextX > ( N - 1) | nextY > ( N - 1)) continue;
                if( map[nextX][nextY] == 1 && record[nextX][nextY] == 0 ){
                    count++;
                    record[nextX][nextY] = 1;
                    deque.offerFirst(new int[]{nextX,nextY});
                }
            }
        }

        return count;
    }
}
