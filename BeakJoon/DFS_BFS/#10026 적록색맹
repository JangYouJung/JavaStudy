import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    static int N;
    static Character[][] picture;
    static Integer[][] BlindnessRecord;
    static Integer[][] NonBlindnessRecord;

    static int[] dx = { 0, 1, 0, -1 };
    static int[] dy = { 1, 0, -1, 0 };

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(bf.readLine());

        picture = new Character[N][N];
        BlindnessRecord = new Integer[N][N];
        NonBlindnessRecord = new Integer[N][N];

        for( int i = 0; i < N; i++ ){
            String line = bf.readLine();
            for( int j = 0; j < N; j++ ){
                picture[i][j] = line.charAt(j);
                BlindnessRecord[i][j] = 0;
                NonBlindnessRecord[i][j] = 0;
            }
        }

        int blindnessCount = 0;
        int nonBlindnessCount = 0;

        for( int i = 0; i < N; i++ ){
            for( int j = 0; j < N; j++ ){
                if( BlindnessRecord[i][j] == 0 ){
                    blindnessCount++;
                    checkColorGroup(i,j,true);
                }
                if( NonBlindnessRecord[i][j] == 0 ){
                    nonBlindnessCount++;
                    checkColorGroup(i,j,false);
                }
            }
        }

        System.out.println( nonBlindnessCount + " " + blindnessCount );
    }


    public static void checkColorGroup( int x, int y, boolean blindness ){
        Queue<int[]> queue = new LinkedList<>();
        queue.offer( new int[] { x, y });
        if( blindness ) BlindnessRecord[x][y] = 1;
        else NonBlindnessRecord[x][y] = 1;

        while( !queue.isEmpty() ){
            int[] current = queue.poll();
            char color = picture[x][y];

            for( int i = 0; i < 4; i++ ){
                int newX = current[0] + dx[i];
                int newY = current[1] + dy[i];

                if( newX < 0 || newY < 0 || newX > (N-1) || newY > (N-1)) {
                    continue;
                }

                if( blindness ){
                    if( BlindnessRecord[newX][newY] == 1 ) continue;
                    if( color == 'R' | color == 'G'){
                        if( picture[newX][newY] == 'R' | picture[newX][newY] == 'G'){
                            BlindnessRecord[newX][newY] = 1;
                            queue.offer( new int[]{ newX, newY });
                        }
                    }
                    else{
                        if( color == picture[newX][newY] ){
                            BlindnessRecord[newX][newY] = 1;
                            queue.offer( new int[]{ newX, newY });
                        }
                    }
                }
                else{
                    if( color == picture[newX][newY] && NonBlindnessRecord[newX][newY] == 0){
                        NonBlindnessRecord[newX][newY] = 1;
                        queue.offer( new int[]{ newX, newY });
                    }
                }
            }

        }
    }
}
