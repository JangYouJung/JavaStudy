
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;


public class Main {
    static int[] Time;
    static int[][] Sequence;
    static int destination;
    static int N;
    static int K;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int T = Integer.parseInt(br.readLine());

        while( T > 0 ){
            st = new StringTokenizer(br.readLine(), " ");
            N = Integer.parseInt(st.nextToken());   // 건물 개수
            K = Integer.parseInt(st.nextToken());   // 건설 순서 규칙

            Time = new int[N];
            st = new StringTokenizer(br.readLine(), " ");
            for( int i = 0; i < N; i++ ){   // 건물당 걸리는 시간 입력
                int time = Integer.parseInt(st.nextToken());
                Time[i] = time;
            }

            Sequence = new int[N][N];
            for( int i = 0; i < K; i++ ){   // 건물 순서 규칙 입력
                st = new StringTokenizer(br.readLine(), " ");
                int from = Integer.parseInt(st.nextToken());
                int to = Integer.parseInt(st.nextToken());

                Sequence[to-1][from-1] = 1;
            }

            destination = Integer.parseInt(br.readLine());
            System.out.println(Construction(destination - 1 ));

            T--;
        }
    }

    static int Construction( int n ) {

        ArrayList<Integer> time = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            if (Sequence[n][i] == 1) {
                time.add(Construction(i));
            }
        }

        if(time.isEmpty()){
            return Time[n];
        }
        else{
            int max = 0;
            for (int i : time) {
                if (i > max) max = i;
            }

            return max + Time[n];
        }
    }
}

