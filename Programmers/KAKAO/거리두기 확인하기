class Solution {

    static String[][] waitingRoom;
    static int[][] crossOne = {{0,1},{1,0},{-1,0},{0,-1}};
    static int[][] crossTwo = {{0,2},{2,0},{-2,0},{0,-2}};
    static int[][] diagonal = {{-1,-1},{1,1},{-1,1},{1,-1}};

    public int[] solution(String[][] places) {

        int[] answer = new int[5];

        for( int i = 0; i < 5; i++ ){
            waitingRoom = new String[5][5];

            for( int j = 0; j < 5; j++){
                String[] line = places[i][j].split("");

                for( int k = 0; k < 5; k++ ){
                    waitingRoom[j][k] = line[k];
                }
            }

            answer[i] = checkDistance(waitingRoom);
        }

        return answer;
    }

    public static int checkDistance( String[][] waitingRoom ){

        for( int i = 0; i < 5; i++ ){
            for( int j = 0; j < 5; j++ ){
                if( waitingRoom[i][j].equals("P")){
    
                    // 해당 유저 주위에 다른 유저 있는지 체크
                    //[1] 십자가 방향으로 +-1 주위의 유저 체크
                    int[][] crossOneCheck = crossOne;

                    for( int[] coordinate: crossOneCheck ){
                        int x = coordinate[0] + i;
                        int y = coordinate[1] + j;

                        if( x < 0 | y < 0 ) continue;
                        if( x > 4 | y > 4 ) continue;

                        // 십자가 방향 유저 한 명이라도 있으면 0 리턴
                        if(waitingRoom[x][y].equals("P")) return 0;

                    }

                    // [2] 십자가 방향으로 +- 2
                    int[][] crossTwoCheck = crossTwo;

                    for( int[] coordinate: crossTwoCheck ){
                        int x = coordinate[0] + i;
                        int y = coordinate[1] + j;

                        if( x < 0 | y < 0 ) continue;
                        if( x > 4 | y > 4 ) continue;

                        // 십자가 방향 유저 있으면 사이에 가림막 없을 경우 0 리턴
                        if(waitingRoom[x][y].equals("P")){                
                            if(x == i){
                                if(!waitingRoom[x][(j+y)/2].equals("X")) return 0;
                            }
                            else{
                                if(!waitingRoom[(i+x)/2][y].equals("X")) return 0;
                            }
                        }

                    }
                    
                    // [3] 대각선 방향으로 존재하는지 확인
                    int[][] diagonalCheck = diagonal;

                    for( int[] coordinate: diagonalCheck ){
                        int x = coordinate[0] + i;
                        int y = coordinate[1] + j;

                        if( x < 0 | y < 0 ) continue;
                        if( x > 4 | y > 4 ) continue;

                        // 십자가 방향 유저 있으면 사이에 가림막 없을 경우 0 리턴
                        if(waitingRoom[x][y].equals("P")){
                            if(!waitingRoom[x][j].equals("X") | !waitingRoom[i][y].equals("X")) return 0;
                        }
                    }
                }
            }
        }
        return 1;
    }
}